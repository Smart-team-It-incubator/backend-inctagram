generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"] // Нужно для деплоя
  output = "schema_generate" // Путь куда попадают 
  log      = ["query", "info", "warn", "error"] // Логирование запросов, информационных сообщений, предупреждений и ошибок
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model RefreshToken {
  id          String   @id @default(uuid())
  username    String
  tokenHash   String   @unique
  userId      String
  expiresAt   DateTime
  revoked     Boolean  @default(false)
  userAgent   String?  // User-Agent браузера или устройства
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  session     Session? @relation(fields: [tokenHash], references: [tokenHash]) // Указываем связь здесь
}

model Session {
  id             String   @id @default(uuid()) @map("id")
  userId         String   // ID пользователя
  deviceId       String
  ip             String
  tokenHash      String   @unique
  expiresAt      DateTime
  createdAt      DateTime @default(now())
  lastVisit      DateTime @updatedAt

  refreshToken   RefreshToken? // Здесь связь объявлять не нужно дополнительно
}



model PasswordResetRequest {
  id              String   @id @default(uuid())
  username        String
  resetTokenHash  String
  expiresAt       DateTime
  used            Boolean  @default(false)
  createdAt       DateTime @default(now())

}

model RevokedToken {
  id         String   @id @default(uuid())
  tokenHash  String
  revokedAt  DateTime @default(now())
}

