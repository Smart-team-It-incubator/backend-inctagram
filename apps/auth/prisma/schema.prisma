generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"] // Нужно для деплоя
  output = "schema_generate" // Путь куда попадают 
  log      = ["query", "info", "warn", "error"] // Логирование запросов, информационных сообщений, предупреждений и ошибок
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model RefreshToken {
  id          String   @id @default(uuid())  // Уникальный идентификатор
  username    String                             // Имя пользователя
  tokenHash   String   @unique                  // Уникальный хэш токена
  userId      String                             // ID пользователя
  expiresAt   DateTime                          // Время истечения токена
  revoked     Boolean  @default(false)          // Флаг отзыва токена
  userAgent   String?                           // User-Agent браузера или устройства
  createdAt   DateTime @default(now())          // Дата создания токена
  updatedAt   DateTime @updatedAt               // Дата последнего обновления

  session     Session? @relation(fields: [tokenHash], references: [tokenHash], onDelete: Cascade) 
  // Связываем RefreshToken с Session через tokenHash.
  // При удалении записи в Session, автоматически удалится и связанный RefreshToken.
}

model Session {
  id           String         @id @default(uuid()) @map("id")  // Уникальный идентификатор
  userId       String                                     // ID пользователя
  deviceId     String                                     // Уникальный ID устройства
  ip           String                                     // IP-адрес устройства
  tokenHash    String         @unique                    // Уникальный хэш токена
  expiresAt    DateTime                                  // Время истечения сессии
  createdAt    DateTime       @default(now())            // Дата создания сессии
  lastVisit    DateTime       @updatedAt                 // Дата последнего визита

  refreshToken RefreshToken?                             // Обратная связь на RefreshToken
}




model PasswordResetRequest {
  id              String   @id @default(uuid())
  username        String
  resetTokenHash  String
  expiresAt       DateTime
  used            Boolean  @default(false)
  createdAt       DateTime @default(now())

}

model RevokedToken {
  id         String   @id @default(uuid())
  tokenHash  String
  revokedAt  DateTime @default(now())
}

